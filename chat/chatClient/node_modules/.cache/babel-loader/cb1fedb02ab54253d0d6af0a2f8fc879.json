{"remainingRequest":"/Users/georgedekker/Movies/dev/chat/client/node_modules/babel-loader/lib/index.js!/Users/georgedekker/Movies/dev/chat/client/node_modules/eslint-loader/index.js??ref--13-0!/Users/georgedekker/Movies/dev/chat/client/services/socketio.service.js","dependencies":[{"path":"/Users/georgedekker/Movies/dev/chat/client/services/socketio.service.js","mtime":1628112652447},{"path":"/Users/georgedekker/Movies/dev/chat/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/georgedekker/Movies/dev/chat/client/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/georgedekker/Movies/dev/chat/client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMvZ2VvcmdlZGVra2VyL01vdmllcy9kZXYvY2hhdC9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMvZ2VvcmdlZGVra2VyL01vdmllcy9kZXYvY2hhdC9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvVXNlcnMvZ2VvcmdlZGVra2VyL01vdmllcy9kZXYvY2hhdC9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCB7IGlvIH0gZnJvbSAnc29ja2V0LmlvLWNsaWVudCc7Cgp2YXIgU29ja2V0aW9TZXJ2aWNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBTb2NrZXRpb1NlcnZpY2UoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU29ja2V0aW9TZXJ2aWNlKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInNvY2tldCIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJyb29tIiwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMCkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAidXNlciIsIHsKICAgICAgbmFtZTogJ3VzZXJOYW1lJyArIHRoaXMucm9vbQogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJyb29tcyIsIHt9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImNoYXRNZXNzYWdlIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgIm1lc3NhZ2UiLCB2b2lkIDApOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFNvY2tldGlvU2VydmljZSwgW3sKICAgIGtleTogInNvY2tldENyZWF0ZWQiLAogICAgdmFsdWU6IC8vIHJvb21zW3Jvb21dID0geyB1c2Vyczoge30gfQogICAgLy8gcm9vbXNbcm9vbV0udXNlcnNbc29ja2V0LmlkXSA9IG5hbWUKICAgIGZ1bmN0aW9uIHNvY2tldENyZWF0ZWQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvLyBwcm9jZXNzLmVudi5WVUVfQVBQX1NPQ0tFVF9FTkRQT0lOVAogICAgICAvLyB0aGlzLnNvY2tldCA9IGlvKCBwcm9jZXNzLmVudi5WVUVfQVBQX1NPQ0tFVF9FTkRQT0lOVCk7CiAgICAgIHRoaXMuc29ja2V0ID0gaW8ocHJvY2Vzcy5lbnYuVlVFX0FQUF9TT0NLRVRfRU5EUE9JTlQsIHsKICAgICAgICBhdXRoOiB7CiAgICAgICAgICB0b2tlbjogJ2FiYycsCiAgICAgICAgICBuYW1lOiB0aGlzLnVzZXIubmFtZQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHRoaXMuc29ja2V0Lm9uKCdjb25uZWN0aW9uLXN1Y2Nlc3MnLCBmdW5jdGlvbiAodXNlckZyb21TZXJ2ZXIpIHsKICAgICAgICBfdGhpcy51c2VyID0gdXNlckZyb21TZXJ2ZXI7CiAgICAgICAgcmV0dXJuIF90aGlzLnVzZXI7CiAgICAgIH0pOyAvLyB0aGlzLnVzZXJbJ25hbWUnXSA9IHRoaXMudXNlck5hbWUKICAgICAgLy8gY29uc29sZS5sb2coJ2Fib3V0IHRvIGVtaXQgbmV3LXVzZXI6ICcrSlNPTi5zdHJpbmdpZnkodGhpcy51c2VyKSkKCiAgICAgIHRoaXMuc29ja2V0LmVtaXQoJ25ldy11c2VyJywgdGhpcy51c2VyKTsKICAgICAgdGhpcy5zb2NrZXQub24oJ3VzZXItY29ubmVjdGVkJywgZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgICBfdGhpcy51c2VyID0gdXNlcjsgLy8gY29uc29sZS5sb2coJ3VzZXJOYW1lOiAnK3RoaXMudXNlci5uYW1lKycgJytKU09OLnN0cmluZ2lmeSh0aGlzLnVzZXIpKQoKICAgICAgICByZXR1cm4gX3RoaXMudXNlcjsKICAgICAgfSk7CiAgICAgIHRoaXMuc29ja2V0Lm9uKCdjaGF0LW1lc3NhZ2UnLCBmdW5jdGlvbiAocmVjZWl2ZWQpIHsKICAgICAgICAvLyBjb25zb2xlLmxvZygnU29ja2V0aW9TZXJ2aWNlLm9uIGNoYXQtbWVzc2FnZSByZWNlaXZlZDonK3JlY2VpdmVkLm1lc3NhZ2UpCiAgICAgICAgX3RoaXMudXNlci5uYW1lID0gcmVjZWl2ZWQudXNlci5uYW1lOwogICAgICAgIF90aGlzLnVzZXIudGltZVN0YW1wID0gRGF0ZS5ub3coKTsgLy8gY29uc29sZS5sb2coJ21lc3NhZ2UgZnJvbSB1c2VyOiAnK3JlY2VpdmVkLm1lc3NhZ2UrJyBmcm9tOiAnK3RoaXMudXNlci5uYW1lKycgYXQ6ICcrSlNPTi5zdHJpbmdpZnkodGhpcy51c2VyKSkKICAgICAgICAvLyByZXR1cm4ge21lc3NhZ2U6IG1lc3NhZ2VDaGF0Lm1lc3NhZ2UsIHVzZXI6dGhpcy51c2VyfQoKICAgICAgICB2YXIgdGVtcCA9IHsKICAgICAgICAgIG1lc3NhZ2U6IHJlY2VpdmVkLm1lc3NhZ2UsCiAgICAgICAgICB1c2VyOiBfdGhpcy51c2VyCiAgICAgICAgfTsgLy8gcmV0dXJuIHRlbXAKCiAgICAgICAgcmV0dXJuIHRlbXA7CiAgICAgIH0pOyAvLyB0aGlzLnNvY2tldC5vbignY2hhdC1tZXNzYWdlJywoY2hhdE1lc3NhZ2UpID0+IHsKICAgICAgLy8gIHRoaXMuY2hhdE1lc3NhZ2UgPSBjaGF0TWVzc2FnZQogICAgICAvLyAgcmV0dXJuIHRoaXMuY2hhdE1lc3NhZ2UgCiAgICAgIC8vIH0pCiAgICB9CiAgfSwgewogICAga2V5OiAiZGlzY29ubmVjdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY29ubmVjdCgpIHsKICAgICAgLy8gaWYgKHNvY2tldCkgewogICAgICB0aGlzLnNvY2tldC5kaXNjb25uZWN0KCk7IC8vIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZW5kTWVzc2FnZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2VuZE1lc3NhZ2UoY2hhdE1lc3NhZ2UsIHVzZXIpIHsKICAgICAgLy8gdGhpcy51c2VyLm5hbWUgPSB1c2VyLm5hbWUKICAgICAgLy8gY29uc29sZS5sb2coJ2NoYXRNZXNzYWdlIGxpYjogJytjaGF0TWVzc2FnZSwgdXNlcikKICAgICAgdGhpcy51c2VyLm5hbWUgPSB1c2VyLm5hbWU7CiAgICAgIHRoaXMuc29ja2V0LmVtaXQoJ3NlbmQtY2hhdC1tZXNzYWdlJywgY2hhdE1lc3NhZ2UsIHRoaXMudXNlcik7CiAgICAgIHJldHVybiB7CiAgICAgICAgbWVzc2FnZTogY2hhdE1lc3NhZ2UsCiAgICAgICAgdXNlcjogdGhpcy51c2VyCiAgICAgIH07IC8vIGNvbnNvbGUubG9nKCd1c2VyIGZyb20gc2VuZC1jaGF0LW1lc3NhZ2U6ICcrSlNPTi5zdHJpbmdpZnkodXNlcikpCiAgICAgIC8vIHJldHVybiB7bWVzc2FnZTogdGhpcy5tZXNzYWdlQ2hhdC5tZXNzYWdlLCB1c2VyOnRoaXMudXNlcn0KICAgIH0gLy8gdGhpcy5zb2NrZXQub24oJ2NoYXQtbWVzc2FnZScsIChkYXRhKSA9PiB7CiAgICAvLyAgIC8vICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZnJvbSBzZXJ2ZXI6ICcrZGF0YSkKICAgIC8vICAgLy8gICAgICAgICAgICAgICAvLyB9KQogICAgLy8gfQogICAgLy8gdGhpcy5yZWNlaXZlTWVzc2FnZShjaGF0TWVzc2FnZSkKICAgIC8vIHJlY2VpdmVNZXNzYWdlKGNoYXRNZXNzYWdlKXsKICAgIC8vICAgY29uc29sZS5sb2coJ21vdW50ZWQgcmVhZHkgdG8gcmVjZWl2ZSBtZXNzYWdlJytjaGF0TWVzc2FnZSkKICAgIC8vIH0KICAgIC8vICAgc29ja2V0OwogICAgLy8gICByb29tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjEwMDApOwogICAgLy8gICBuYW1lID0gJ3VzZXJOYW1lJyt0aGlzLnJvb207CiAgICAvLyAgIGNvbnN0cnVjdG9yKCkge30KICAgIC8vICAgc2V0dXBTb2NrZXRDb25uZWN0aW9uKCkgewogICAgLy8gICAgIHRoaXMuc29ja2V0ID0gaW8ocHJvY2Vzcy5lbnYuVlVFX0FQUF9TT0NLRVRfRU5EUE9JTlQpOwogICAgLy8gICAgICAgICAgICAgICB0aGlzLnNvY2tldCA9IGlvKHByb2Nlc3MuZW52LlZVRV9BUFBfU09DS0VUX0VORFBPSU5ULCB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aDogewogICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiAnYWJjJwogICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgIC8vICAgICAgICAgICAgICAgfSk7CiAgICAvLyAgICAgICAgICAgICAgIHRoaXMuc29ja2V0LmVtaXQoJ25ldy11c2VyJywgdGhpcy5yb29tLCB0aGlzLm5hbWUpOwogICAgLy8gICAgICAgICAgICAgICB0aGlzLnNvY2tldC5vbigndXNlci1jb25uZWN0ZWQnLCAgbmFtZSA9PiB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobmFtZSkKICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgLy8gICAgICAgICAgICAgICAvLyB0aGlzLnNvY2tldC5vbignY2hhdC1tZXNzYWdlJywgKGRhdGEpID0+IHsKICAgIC8vICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZnJvbSBzZXJ2ZXI6ICcrZGF0YSkKICAgIC8vICAgICAgICAgICAgICAgLy8gfSkKICAgIC8vICAgICAgICAgICAgICAgLy8gdGhpcy5zb2NrZXQuZW1pdCgnc2VuZC1jaGF0LW1lc3NhZ2UnLCB0aGlzLnJvb20sIHRoaXMubWVzc2FnZSk7CiAgICAvLyB9CiAgICAvLyAgIGRpc2Nvbm5lY3QoKSB7CiAgICAvLyAgICAgICAgICAgICAgIGlmICh0aGlzLnNvY2tldCkgewogICAgLy8gICAgICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQuZGlzY29ubmVjdCgpOwogICAgLy8gICAgICAgICAgICAgICB9CiAgICAvLyAgICAgICAgICAgfQoKICB9XSk7CgogIHJldHVybiBTb2NrZXRpb1NlcnZpY2U7Cn0oKTsKCmV4cG9ydCBkZWZhdWx0IG5ldyBTb2NrZXRpb1NlcnZpY2UoKTs="},{"version":3,"sources":["/Users/georgedekker/Movies/dev/chat/client/services/socketio.service.js"],"names":["io","SocketioService","Math","floor","random","name","room","socket","process","env","VUE_APP_SOCKET_ENDPOINT","auth","token","user","on","userFromServer","emit","received","timeStamp","Date","now","temp","message","disconnect","chatMessage"],"mappings":";;;;AAAA,SAASA,EAAT,QAAmB,kBAAnB;;IAEMC,e;;;;;;kCAGGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,IAAzB,C;;kCACA;AAAEC,MAAAA,IAAI,EAAE,aAAW,KAAKC;AAAxB,K;;mCACC,E;;;;;;;;;WAIR;AACA;AACA,6BAAe;AAAA;;AACb;AACF;AACA,WAAKC,MAAL,GAAcP,EAAE,CAACQ,OAAO,CAACC,GAAR,CAAYC,uBAAb,EAAsC;AACxCC,QAAAA,IAAI,EAAE;AACNC,UAAAA,KAAK,EAAE,KADD;AAENP,UAAAA,IAAI,EAAE,KAAKQ,IAAL,CAAUR;AAFV;AADkC,OAAtC,CAAhB;AAMA,WAAKE,MAAL,CAAYO,EAAZ,CAAe,oBAAf,EAAqC,UAAAC,cAAc,EAAG;AACpD,QAAA,KAAI,CAACF,IAAL,GAAYE,cAAZ;AACF,eAAO,KAAI,CAACF,IAAZ;AAAiB,OAFjB,EATe,CAYf;AACA;;AACA,WAAKN,MAAL,CAAYS,IAAZ,CAAiB,UAAjB,EAA6B,KAAKH,IAAlC;AACA,WAAMN,MAAN,CAAaO,EAAb,CAAgB,gBAAhB,EAAmC,UAAAD,IAAI,EAAI;AACzC,QAAA,KAAI,CAACA,IAAL,GAAYA,IAAZ,CADyC,CAEzC;;AACA,eAAO,KAAI,CAACA,IAAZ;AACe,OAJjB;AAKA,WAAKN,MAAL,CAAYO,EAAZ,CAAe,cAAf,EAA+B,UAACG,QAAD,EAAc;AAC3C;AAEA,QAAA,KAAI,CAACJ,IAAL,CAAUR,IAAV,GAAiBY,QAAQ,CAACJ,IAAT,CAAcR,IAA/B;AACA,QAAA,KAAI,CAACQ,IAAL,CAAUK,SAAV,GAAsBC,IAAI,CAACC,GAAL,EAAtB,CAJ2C,CAK7C;AACA;;AACA,YAAMC,IAAI,GAAG;AAACC,UAAAA,OAAO,EAACL,QAAQ,CAACK,OAAlB;AAA2BT,UAAAA,IAAI,EAAC,KAAI,CAACA;AAArC,SAAb,CAP6C,CAQ7C;;AACA,eAAOQ,IAAP;AACD,OAVC,EApBe,CA+Bf;AACA;AACA;AACA;AACC;;;WAED,sBAAa;AACC;AACc,WAAKd,MAAL,CAAYgB,UAAZ,GAFf,CAGC;AACC;;;WAEf,qBAAYC,WAAZ,EAAyBX,IAAzB,EAA8B;AAC5B;AACA;AACA,WAAKA,IAAL,CAAUR,IAAV,GAAiBQ,IAAI,CAACR,IAAtB;AACA,WAAKE,MAAL,CAAYS,IAAZ,CAAiB,mBAAjB,EAAsCQ,WAAtC,EAAmD,KAAKX,IAAxD;AACA,aAAO;AAACS,QAAAA,OAAO,EAACE,WAAT;AAAsBX,QAAAA,IAAI,EAAC,KAAKA;AAAhC,OAAP,CAL4B,CAM5B;AAEJ;AACG,K,CAEH;AACA;AACA;AACA;AACE;AAEF;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;;;;;;;AAMA,eAAe,IAAIZ,eAAJ,EAAf","sourcesContent":["import { io } from 'socket.io-client';\n\nclass SocketioService {\n  \n  socket;\n  room = Math.floor(Math.random()*1000);\n  user = { name: 'userName'+this.room};\n  rooms = {  };\n  chatMessage;\n  message;\n  \n  // rooms[room] = { users: {} }\n  // rooms[room].users[socket.id] = name\n  socketCreated(){\n    // process.env.VUE_APP_SOCKET_ENDPOINT\n  // this.socket = io( process.env.VUE_APP_SOCKET_ENDPOINT);\n  this.socket = io(process.env.VUE_APP_SOCKET_ENDPOINT, {\n                auth: {\n                token: 'abc',\n                name: this.user.name\n                }\n  });\n  this.socket.on('connection-success', userFromServer =>{\n    this.user = userFromServer\n  return this.user});\n  // this.user['name'] = this.userName\n  // console.log('about to emit new-user: '+JSON.stringify(this.user))\n  this.socket.emit('new-user', this.user);\n  this. socket.on('user-connected',  user => {\n    this.user = user\n    // console.log('userName: '+this.user.name+' '+JSON.stringify(this.user))\n    return this.user\n                  })\n  this.socket.on('chat-message', (received) => {\n    // console.log('SocketioService.on chat-message received:'+received.message)\n    \n    this.user.name = received.user.name\n    this.user.timeStamp = Date.now()\n  // console.log('message from user: '+received.message+' from: '+this.user.name+' at: '+JSON.stringify(this.user))\n  // return {message: messageChat.message, user:this.user}\n  const temp = {message:received.message, user:this.user}\n  // return temp\n  return temp\n})                               \n  // this.socket.on('chat-message',(chatMessage) => {\n  //  this.chatMessage = chatMessage\n  //  return this.chatMessage \n  // })\n  }\n  \n  disconnect() {\n                // if (socket) {\n                              this.socket.disconnect();\n                // }\n                }\n\n  sendMessage(chatMessage, user){\n    // this.user.name = user.name\n    // console.log('chatMessage lib: '+chatMessage, user)\n    this.user.name = user.name\n    this.socket.emit('send-chat-message', chatMessage, this.user);\n    return {message:chatMessage, user:this.user}\n    // console.log('user from send-chat-message: '+JSON.stringify(user))\n  \n// return {message: this.messageChat.message, user:this.user}\n  }\n    \n// this.socket.on('chat-message', (data) => {\n//   //               //               console.log('from server: '+data)\n//   //               // })\n// }\n  // this.receiveMessage(chatMessage)\n\n// receiveMessage(chatMessage){\n//   console.log('mounted ready to receive message'+chatMessage)\n// }\n//   socket;\n//   room = Math.floor(Math.random()*1000);\n//   name = 'userName'+this.room;\n  \n\n//   constructor() {}\n\n//   setupSocketConnection() {\n//     this.socket = io(process.env.VUE_APP_SOCKET_ENDPOINT);\n    \n//               this.socket = io(process.env.VUE_APP_SOCKET_ENDPOINT, {\n//                             auth: {\n//                             token: 'abc'\n//                             }\n//               });\n                       \n              \n              \n//               this.socket.emit('new-user', this.room, this.name);\n\n//               this.socket.on('user-connected',  name => {\n//                             console.log(name)\n//                             })\n\n//               // this.socket.on('chat-message', (data) => {\n//               //               console.log('from server: '+data)\n//               // })\n\n//               // this.socket.emit('send-chat-message', this.room, this.message);\n\n// }\n\n\n\n//   disconnect() {\n//               if (this.socket) {\n//                   this.socket.disconnect();\n//               }\n//           }\n\n}\n\n\n\nexport default new SocketioService();"]}]}